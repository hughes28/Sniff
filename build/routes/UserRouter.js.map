{"version":3,"sources":["routes/UserRouter.js"],"names":["logger","Logger","DB_ERROR","UserRouter","path","router","updateProfile","bind","init","post","createUser","validateUser","loginUser","deleteUser","changePassword","get","logout","getSession","req","res","session","key","console","log","status","json","message","user_name","email","body","userId","password","newPassword","errorMsg","UserModels","userDb","update","where","id","returns","then","data","error","err","catch","editInfo","successHandler","errorHandler","returning","plain","dataValues","username","onSuccessHandler","onErrorHandler","isEmailAddressValid","checkUserNameExists","updateUser","findOne","active","params","create","emailRegex","match"],"mappings":"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","file":"UserRouter.js","sourcesContent":["// @ flow\n\n'use strict';\n\nimport Logger from '../utils/Logger';\nimport { Router }  from 'express';\nimport UserModels from '../models/user';\nimport bcrypt from 'bcryptjs';\n\ntype LoginParams = {\n    username: string,\n    password: string,\n};\n\ntype CreateUserParams = {\n    username: string,\n    password: string,\n    email: string,\n};\n\nconst logger = new Logger();\nconst DB_ERROR = 'An error with the query has occurred.';\n\nexport default class UserRouter {\n    // these fields must be type annotated, or Flow will complain!\n    router: Router;\n    path: string;\n\n    // take the mount path as the constructor argument\n    constructor(path = '/api/v1/user') {\n        // instantiate the express.Router\n        this.router = Router();\n        this.path = path;\n        // glue it all together\n        this.updateProfile = this.updateProfile.bind(this);\n        this.init();\n    }\n    /**\n    * Attach route handlers to their endpoints.\n    */\n    init(): void {\n        this.router.post('/create', this.createUser);\n        this.router.post('/validate', this.validateUser);\n        this.router.post('/login', this.loginUser);\n        this.router.post('/delete', this.deleteUser);\n        this.router.post('/changePassword', this.changePassword);\n        this.router.post('/updateProfile', this.updateProfile);\n        this.router.get('/logout', this.logout);\n        this.router.get('/session', this.getSession);\n    }\n\n    getSession(req: $Request, res: $Response): void {\n        if (!!req.session.key) {\n            console.log(req.session.key['id']);\n            return res.status(200).json({\n                message: 'User is logged in',\n                user_name: req.session.key.user_name,\n                email: req.session.key.email,\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not logged in'\n            })\n        }\n    }\n\n    changePassword(req: $Request, res: $Response): void {\n        const { body } = req;\n        const userId : string = req.session.key['id'];\n        const password : string = body.password;\n        const newPassword : string = body.newPassword;\n        let errorMsg : string = 'Incorrect password supplied.';\n\n        UserModels.userDb.update({\n            password: newPassword\n        },{\n            where: {\n                id: userId,\n                password: password,\n            },\n            returns: true,\n        }).then((data) => {\n            if (data[0] > 0) {\n                return res.status(200).json({\n                    message: 'Successfully changed password.',\n                });\n            } else {\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(400).json({\n                message: errorMsg,\n                error: err.message,\n            });\n        });\n    }\n\n    updateUser(editInfo, userId, successHandler, errorHandler) {\n        UserModels.userDb.update(editInfo, {\n            where: {\n                id: userId,\n            },\n            returning: true,\n            plain: true,\n        }).then((data) => {\n            if (!!data[1].dataValues) {\n                successHandler(data[1].dataValues);\n            } else {\n                errorHandler({});\n            }\n        }).catch((err) => {\n            errorHandler(err);\n        });\n    }\n\n    updateProfile(req: $Request, res: $Response): void {\n        const { body } = req;\n        const userId : string = req.session.key['id'];\n        const email : string = body.email;\n        const username : string = body.username;\n        let errorMsg : string = 'Invalid username or email.';\n        const onSuccessHandler = (data) => {\n            req.session.key = data;\n            return res.status(200).json({\n                message: 'Successfully updated profile.',\n            });\n        }\n        const onErrorHandler = (err) => {\n            return res.status(500).json({\n                message: errorMsg,\n                error: err.message,\n            });\n        }\n        const editInfo = {};\n\n        if (!!email) {\n            if (!isEmailAddressValid(email)) {\n                return res.status(400).json({\n                    message: 'Invalid email.',\n                }); \n            }\n            editInfo.email = email;\n        } \n\n        if (!!username) {\n            return checkUserNameExists(username).then((data) => {\n                if (!!data) {\n                    return res.status(400).json({\n                        message: 'Username unavailable.',\n                        error: err.message,\n                    });\n                } else {\n                    editInfo.user_name = username;\n                    return this.updateUser(editInfo, userId, onSuccessHandler, onErrorHandler);\n                }\n            }).catch((err) => {\n                logger.error(errorMsg, err, err.message);\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            });\n        }\n\n        return this.updateUser(editInfo, userId, onSuccessHandler, onErrorHandler);\n\n    }\n\n    loginUser(req: $Request, res: $Response): void {\n        const { body } = req;\n        const username : string = body.username;\n        const password : string = body.password;\n        let errorMsg : string = 'Invalid username or password.';\n\n        UserModels.userDb.findOne({\n            where: {\n                user_name: username,\n                password: password,\n                active: true,\n            }\n        }).then((data) => {\n            if (!!data) {\n                req.session.key = data.dataValues;\n                return res.status(200).json({\n                    message: 'Login successful.',\n                });\n            } else {\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(400).json({\n                message: errorMsg,\n                error: err.message,\n            });\n        });\n    }\n\n    logout(req: $Request, res: $Response): void {\n        if (!!req.session.key) {\n            delete req.session.key;\n            return res.status(200).json({\n                message: 'Successfully logged out.',\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            })\n        }\n    }\n\n    deleteUser(req: $Request, res: $Response): void {\n        const { body } = req;\n        let errorMsg : string = 'User cannot be deleted.';\n\n        if (!!req.session.key) {\n            const userId = req.session.key['id'];\n            UserModels.userDb.update({\n                active: false,\n            },{\n                where: {\n                    id: userId,\n                },\n                returns: true,\n            }).then((data) => {\n                if (data[0] > 0) {\n                    delete req.session.key;\n                    return res.status(200).json({\n                        message: 'Successfully deleted user.',\n                    });\n                } else {\n                    return res.status(400).json({\n                        message: errorMsg,\n                        error: err.message,\n                    });\n                }\n            }).catch((err) => {\n                logger.error(errorMsg, err, err.message);\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            })\n        }\n    }\n\n    validateUser(req: $Request, res: $Response): void {\n        const { body } = req;\n        const username : string = body.username;\n        let errorMsg : string = 'User already exists.';\n\n        checkUserNameExists(username).then((data) => {\n            if (!!data) {\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            } else {\n                return res.status(200).json({\n                    message: 'Username available.',\n                });\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(400).json({\n                message: errorMsg,\n                error: err.message,\n            });\n        });\n\n    }\n\n    createUser(req: $Request, res: $Response): void {\n        const { body } = req;\n        const params : CreateUserParams = {\n            username: body.username,\n            password: body.password,\n            email: body.email,\n        };\n        let errorMsg : string = 'User already exists';\n\n        checkUserNameExists(params.username).then((data) => {\n            if (!!data) {\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            } else {\n                errorMsg = 'Failed to create user.';\n\n                UserModels.userDb.create({\n                    user_name: params.username,\n                    password: params.password,\n                    email: params.email,\n                    active: true,\n                }).then((data) => {\n                    return res.status(200).json({\n                        message: 'User created.',\n                    });\n                }).catch((err) => {\n                    logger.error(errorMsg, err, err.message);\n                    return res.status(400).json({\n                        message: errorMsg,\n                        error: err.message,\n                    });\n                })\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(400).json({\n                message: errorMsg,\n                error: err.message,\n            });\n        })\n    }\n\n}\n\nfunction checkUserNameExists (username) {\n    return UserModels.userDb.findOne({\n        where: {\n            user_name: username,\n            active: true,\n        }\n    });\n}\n\nfunction isEmailAddressValid (email) {\n    const emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n    if (!email.match(emailRegex)) {\n        return false;\n    }\n    return true;\n}\n"]}