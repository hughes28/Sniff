{"version":3,"sources":["routes/PostRouter.js"],"names":["logger","Logger","DB_ERROR","PostRouter","path","router","googleMapsClient","googleMaps","createClient","key","googleClient","createPost","bind","init","post","delete","deletePost","editPost","get","getUserPosts","getLoggedInUserPosts","getPost","markAsFound","req","res","postId","params","id","errorMsg","PostModels","postDb","findOne","where","deleted","include","model","AttributeModels","attributeDb","as","attributes","exclude","then","data","status","json","message","catch","err","error","username","UserModels","userDb","user_name","active","user","findAll","submitter_user_id","found","session","update","returns","onComplete","reverseGeocode","latlng","latitude","longitude","city","state","country","results","length","formattedAddress","formatted_address","components","split","trimmedComponents","map","component","trim","rawData","body","name","lastSeen","reward","contact","description","submitterUserId","create","last_seen","additionalAttributes","attr","post_id","bulkCreate","individualHooks","foundUserId","dataValues","found_user_id","returning","plain","console","log"],"mappings":"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","file":"PostRouter.js","sourcesContent":["// @ flow\n\n'use strict';\n\nimport Logger from '../utils/Logger';\nimport { Router }  from 'express';\nimport UserModels from '../models/user';\nimport PostModels from '../models/post';\nimport AttributeModels from '../models/attribute';\nimport bcrypt from 'bcryptjs';\nimport googleMaps from '@google/maps';\n\ntype CreatePostParams = {\n    name: string,\n    lastSeen: date,\n    reward: float,\n    longitude: double,\n    latitude: double,\n    contact: string,\n    description: string,\n    formattedAddress: string,\n    submitterUserId: number,\n};\n\nconst logger = new Logger();\nconst DB_ERROR = 'An error with the query has occurred.';\n\nexport default class PostRouter {\n    // these fields must be type annotated, or Flow will complain!\n    router: Router;\n    path: string;\n    googleClient: Object;\n\n    // take the mount path as the constructor argument\n    constructor(path = '/api/v1/post') {\n        // instantiate the express.Router\n        this.router = Router();\n        const googleMapsClient = googleMaps.createClient({\n            key: 'AIzaSyCqdarCsFQeR7h6Kl643pyk6c8sXxlkHO0'\n        });\n        this.googleClient = googleMapsClient;\n        this.path = path;\n        // glue it all together\n        this.createPost = this.createPost.bind(this);\n        this.init();\n    }\n\n    /**\n    * Attach route handlers to their endpoints.\n    */\n    init(): void {\n        this.router.post('/create', this.createPost);\n        this.router.delete('/delete/:id', this.deletePost);\n        this.router.post('/edit/:id', this.editPost);\n        this.router.get('/userposts/:username', this.getUserPosts);\n        this.router.get('/logged-in-userposts', this.getLoggedInUserPosts);\n        this.router.get('/get/:id', this.getPost);\n        this.router.post('/found/:id', this.markAsFound);\n    }\n\n    getPost(req: $Request, res: $Response): void {\n        const postId = req.params.id;\n        const errorMsg : string = 'Unable to find post.';\n\n        PostModels.postDb.findOne({\n            where: {\n                id: postId,\n                deleted: false,\n            },\n            include: [\n                {\n                    model: AttributeModels.attributeDb,\n                    as: 'additional_attributes',\n                    attributes: {exclude: ['id', 'post_id']},\n                },\n            ],\n        }).then((data) => {\n            if (!!data) {\n                return res.status(200).json({\n                    data\n                });\n            } else {\n                return res.status(404).json({\n                    message: 'Specified post does not exist.'\n                });\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(401).json({message: errorMsg});\n        });\n    }\n\n    getUserPosts(req: $Request, res: $Response): void {\n        const username = req.params.username;\n        let errorMsg : string = 'Unable to find user.';\n\n        UserModels.userDb.findOne({\n            where: {\n                user_name: username,\n                active: true,\n            }\n        }).then((user) => {\n             if (!!user) {\n                errorMsg = 'Unable to find posts.';\n                PostModels.postDb.findAll({\n                    where: {\n                        submitter_user_id: user.id,\n                        deleted: false,\n                        found: false,\n                    },\n                    include: [\n                        {\n                            model: AttributeModels.attributeDb,\n                            as: 'additional_attributes',\n                            attributes: {exclude: ['id', 'post_id']},\n                        },\n                    ],\n                }).then((data) => {\n                    return res.status(200).json({\n                        data\n                    });\n                }).catch((err) => {\n                    logger.error(errorMsg, err, err.message);\n                    return res.status(400).json({message: errorMsg});\n                });\n            } else {\n                return res.status(404).json({\n                    message: 'User does not exist.'\n                });\n            }\n        }).catch((err) => {\n            logger.error(errorMsg, err, err.message);\n            return res.status(401).json({message: errorMsg});\n        });\n\n    }\n\n    getLoggedInUserPosts(req: $Request, res: $Response): void {\n        const errorMsg : string = 'Unable to find posts.';\n\n        if (!!req.session.key) {\n            PostModels.postDb.findAll({\n                where: {\n                    submitter_user_id: req.session.key['id'],\n                    deleted: false,\n                    found: false,\n                },\n                include: [\n                    {\n                        model: AttributeModels.attributeDb,\n                        as: 'additional_attributes',\n                        attributes: {exclude: ['id', 'post_id']},\n                    },\n                ],\n            }).then((data) => {\n                return res.status(200).json({\n                    data\n                });\n            }).catch((err) => {\n                logger.error(errorMsg, err, err.message);\n                return res.status(400).json({message: errorMsg});\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            })\n        }\n    }\n\n    deletePost(req: $Request, res: $Response): void {\n        const postId = req.params.id;\n        let errorMsg : string = 'Unable to delete post.';\n\n        if (!!req.session.key) {\n            PostModels.postDb.update({\n                deleted: true,\n            },{\n                where: {\n                    id: postId,\n                    submitter_user_id: req.session.key['id'],\n                },\n                returns: true,\n            }).then((data) => {\n                if (data[0] > 0) {\n                    return res.status(202).json({\n                        message: 'Successfully deleted post.',\n                    });\n                } else {\n                    return res.status(401).json({\n                        message: 'User not authenticated.'\n                    });\n                }\n            }).catch((err) => {\n                logger.error(errorMsg, err, err.message);\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            })\n        }\n    }\n\n    reverseGeocode(post: CreatePostParams, onComplete: (Object) => void) {\n        return this.googleClient.reverseGeocode({\n            latlng: [post.latitude, post.longitude],\n        }, (error, data) => {\n            post.city = 'Unknown';\n            post.state = 'Unknown';\n            post.country = 'Unknown';\n\n            if (error === null && data.json.results.length !== 0) {\n                const formattedAddress = data.json.results[0].formatted_address;\n\n                post.formattedAddress = formattedAddress;\n\n                const components = formattedAddress.split(',');\n                const trimmedComponents = components.map((component) => component.trim());\n                const length = trimmedComponents.length;\n\n                if (length > 0) {\n                    post.country = trimmedComponents[length - 1];\n                }\n                if (length > 1) {\n                    post.state = trimmedComponents[length - 2];\n                }\n                if (length > 2) {\n                    post.city = trimmedComponents[length - 3];\n                }\n\n            } else {\n                const rawData = `Latitude (${post.latitude}), Longitude (${post.longitude})`;\n                post.formattedAddress = rawData;\n            }\n            onComplete(post);\n        });\n    }\n\n    createPost(req: $Request, res: $Response): void {\n        const { body } = req;\n        const params : CreatePostParams = {\n            name: body.name,\n            lastSeen: body.lastSeen,\n            reward: body.reward,\n            longitude: body.longitude,\n            latitude: body.latitude,\n            contact: body.contact,\n            description: body.description,\n            submitterUserId: req.session.key['id'],\n        };\n        if (params.longitude < -180 || params.longitude > 180 || params.latitude < -90 || params.latitude > 90) {\n            return res.status(400).json({\n                message: 'Invalid longitude-latitude combination.',\n            });\n        }\n        this.reverseGeocode(params, (post) => {\n            let errorMsg : string = 'Unable to create post.';\n            if (!!req.session.key) {\n                PostModels.postDb.create({\n                    name: post.name,\n                    last_seen: post.lastSeen,\n                    reward: post.reward,\n                    longitude: post.longitude,\n                    latitude: post.latitude,\n                    contact: post.contact,\n                    city: post.city,\n                    state: post.state,\n                    country: post.country,\n                    description: post.description,\n                    formatted_address: post.formattedAddress,\n                    submitter_user_id: post.submitterUserId,\n                }).then((data) => {\n                    const additionalAttributes = body.additionalAttributes.map((attr) => {\n                        attr.post_id = data.id;\n                        return attr;\n                    });\n                    AttributeModels.attributeDb.bulkCreate(additionalAttributes, {individualHooks: true})\n                    .then((data) => {\n                        return res.status(200).json({\n                            message: 'Post created.',\n                        });\n                    }).catch((err) => {\n                        logger.error(errorMsg, err, err.message);\n                        return res.status(400).json({\n                            message: errorMsg,\n                            error: err.message,\n                        });\n                    });\n                }).catch((err) => {\n                    logger.error(errorMsg, err, err.message);\n                    return res.status(400).json({\n                        message: errorMsg,\n                        error: err.message,\n                    });\n                })\n            } else {\n                return res.status(401).json({\n                    message: 'User not authenticated.'\n                })\n            }\n        });\n    }\n\n    editPost(req: $Request, res: $Response): void {\n        const postId = req.params.id;\n        const { body } = req;\n\n        let errorMsg : string = 'Unable to edit post.';\n\n        if (body.longitude < -180 || body.longitude > 180 || body.latitude < -90 || body.latitude > 90) {\n            return res.status(400).json({\n                message: 'Invalid longitude-latitude combination.',\n            });\n        }\n\n        if (!!req.session.key) {\n            PostModels.postDb.update({\n                name: body.name,\n                last_seen: body.lastSeen,\n                reward: body.reward,\n                longitude: body.longitude,\n                latitude: body.latitude,\n                contact: body.contact,\n                description: body.description,\n                formatted_address: body.formattedAddress,\n            },{\n                where: {\n                    id: postId,\n                    submitter_user_id: req.session.key['id'],\n                },\n                returns: true,\n            }).then((data) => {\n                if (data[0] > 0) {\n                    return res.status(200).json({\n                        message: 'Successfully edited post.',\n                    });\n                } else {\n                    return res.status(401).json({\n                        message: 'User not authenticated.'\n                    });\n                }\n            }).catch((err) => {\n                logger.error(errorMsg, err, err.message);\n                return res.status(400).json({\n                    message: errorMsg,\n                    error: err.message,\n                });\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            })\n        }\n\n    }\n\n    markAsFound(req: $Request, res: $Response): void {\n        const postId = req.params.id;\n        const { body } = req;\n        const username = body.username;\n\n        if (!!req.session.key) {\n            UserModels.userDb.findOne({\n                where: {\n                    user_name: username,\n                    active: true,\n                },\n            }).then((data) => {\n                let foundUserId = null;\n                if (!!data) {\n                    foundUserId = data.dataValues.id;\n                } else {\n                    return res.status(404).json({\n                        message: 'Username not found.',\n                    });\n                }\n                PostModels.postDb.update({\n                    found: true,\n                    found_user_id: foundUserId,\n                },{\n                    where: {\n                        id: postId,\n                        submitter_user_id: req.session.key['id'],\n                        found: false,\n                    },\n                    returning: true,\n                    plain: true,\n                }).then((data) => {\n                    console.log(data);\n                    if (!!data && !!data[1].dataValues) {\n                        return res.status(200).json({\n                            message: 'Successfully marked as found.',\n                        });\n                    } else {\n                        return res.status(500).json({\n                            message: 'Internal server error.'\n                        });\n                    }\n                }).catch((err) => {\n                    return res.status(400).json({\n                        message: 'User not authorized.',\n                        error: err.message,\n                    });\n                });\n            });\n        } else {\n            return res.status(401).json({\n                message: 'User not authenticated.'\n            });\n        }\n    }\n\n}\n"]}