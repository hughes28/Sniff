{"version":3,"sources":["utils/Logger.js"],"names":["Logger","context","err","message","console","log","name","msg","errors","replace","value"],"mappings":";;;;;;;;;;IAAqBA,M;AACjB,sBAAc;AAAA;AAAE;;;;8BAEVC,O,EAAiBC,G,EAAKC,O,EAAe;AACvCC,oBAAQC,GAAR,CAAY,wDAAZ,EAAsEJ,OAAtE,EAA+EC,IAAII,IAAnF,EAAyFH,OAAzF;;AAEA,gBAAID,IAAII,IAAJ,KAAa,gCAAjB,EAAmD;AAC/C,oBAAIC,MAAML,IAAIM,MAAJ,CAAW,CAAX,EAAcL,OAAd,CAAsBM,OAAtB,CAA8B,IAA9B,EAAoC,GAApC,CAAV;AACAF,sBAAMA,IAAIE,OAAJ,CAAY,iBAAZ,EAA+B,oBAA/B,CAAN;;AAEA,uBAAO;AACHN,6BAASI,GADN;AAEHG,2BAAOR,IAAIM,MAAJ,CAAW,CAAX,EAAcE;AAFlB,iBAAP;AAIH;AACJ;;;;;;kBAfgBV,M","file":"Logger.js","sourcesContent":["export default class Logger {\n    constructor() {}\n\n    error(context: string, err, message): void {\n        console.log('ERROR:\\n\\tContext: %s\\n\\tError Type: %s\\n\\tMessage: %s', context, err.name, message);\n\n        if (err.name === 'SequelizeUniqueConstraintError') {\n            let msg = err.errors[0].message.replace(/_/g, ' ');\n            msg = msg.replace(/must be unique/g, 'is already in use.');\n\n            return {\n                message: msg,\n                value: err.errors[0].value,\n            };\n        }\n    }\n}\n"]}