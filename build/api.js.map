{"version":3,"sources":["api.js"],"names":["Api","express","middleware","routes","generateDb","store","session","redisStoreOptions","process","env","NODE_ENV","url","REDIS_URL","host","REDIS_HOST","port","REDIS_PORT","use","secret","resave","saveUninitialized","cookie","maxAge","bodyParser","json","urlencoded","extended","userRouter","UserRouter","postRouter","PostRouter","path","checkRedisConnect","router","static","join","__dirname","get","req","res","sendFile","resolve","REGEN_LOCAL_DB","next","Error"],"mappings":"AAEA;;;;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEqBA,G;;AAIjB;AACA,mBAAc;AAAA;;AACV,aAAKC,OAAL,GAAe,wBAAf;AACA,aAAKC,UAAL;AACA,aAAKC,MAAL;AACA,aAAKC,UAAL;AACH;;AAED;;AAXA;;;;;qCAYmB;AACf,gBAAMC,QAAQ,4BAAWC,wBAAX,CAAd;AACA,gBAAMC,oBAAoBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACtB,IAAIL,KAAJ,CAAU,EAACM,KAAKH,QAAQC,GAAR,CAAYG,SAAlB,EAAV,CADsB,GAEpB,IAAIP,KAAJ,CAAU;AACRQ,sBAAML,QAAQC,GAAR,CAAYK,UADV;AAERC,sBAAMP,QAAQC,GAAR,CAAYO;AAFV,aAAV,CAFN;AAMA,iBAAKf,OAAL,CAAagB,GAAb,CAAiB,sBAAO,KAAP,CAAjB;AACA,iBAAKhB,OAAL,CAAagB,GAAb,CAAiB,8BAAQ;AACrBC,wBAAQ,KADa;AAErBC,wBAAQ,KAFa;AAGrBd,uBAAOE,iBAHc;AAIrBa,mCAAmB,KAJE;AAKrBC,wBAAQ;AACJC,4BAAQ,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IADvB,CAC6B;AAD7B;AALa,aAAR,CAAjB;AASA,iBAAKrB,OAAL,CAAagB,GAAb,CAAiBM,qBAAWC,IAAX,EAAjB;AACA,iBAAKvB,OAAL,CAAagB,GAAb,CAAiBM,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAjB;AACA,iBAAKzB,OAAL,CAAagB,GAAb,CAAiB,qBAAjB;AACH;;AAED;;;;iCACe;AACX,gBAAMU,aAAyB,IAAIC,oBAAJ,EAA/B;AACA,gBAAMC,aAAyB,IAAIC,oBAAJ,EAA/B;;AAEA;AACA,iBAAK7B,OAAL,CAAagB,GAAb,CAAiBU,WAAWI,IAA5B,EAAkCC,iBAAlC,EAAqDL,WAAWM,MAAhE;AACA,iBAAKhC,OAAL,CAAagB,GAAb,CAAiBY,WAAWE,IAA5B,EAAkCC,iBAAlC,EAAqDH,WAAWI,MAAhE;;AAEA,iBAAKhC,OAAL,CAAagB,GAAb,CAAiBhB,kBAAQiC,MAAR,CAAeH,eAAKI,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAjB;AACA,iBAAKnC,OAAL,CAAaoC,GAAb,CAAiB,IAAjB,EAAuB,UAACC,GAAD,EAAMC,GAAN;AAAA,uBAAcA,IAAIC,QAAJ,CAAaT,eAAKU,OAAL,CAAaL,SAAb,EAAwB,QAAxB,EAAkC,YAAlC,CAAb,CAAd;AAAA,aAAvB;AACH;;AAED;;;;qCACmB;AACf,gBAAIM,wBAAkBlC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,SAA/C,EAA0D;AACtD;AACH;AACJ;;;;;;kBAtDgBV,G;;;AAyDrB,SAASgC,iBAAT,CAA2BM,GAA3B,EAA0CC,GAA1C,EAA0DI,IAA1D,EAA8E;AAC1E,QAAI,CAACL,IAAIhC,OAAT,EAAkB;AACd,eAAOqC,KAAK,IAAIC,KAAJ,CAAU,sBAAV,CAAL,CAAP;AACH;AACD,WAAOD,MAAP;AACH","file":"api.js","sourcesContent":["// @flow\n\n'use strict'\n\nimport type { $Application, NextFunction } from 'express';\nimport express from 'express';\nimport session from 'express-session'\nimport redis from 'redis';\nimport redisStore from 'connect-redis';\nimport morgan from 'morgan';\nimport path from 'path';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport UserRouter from './routes/UserRouter';\nimport PostRouter from './routes/PostRouter';\nimport { REGEN_LOCAL_DB } from './utils/Args';\nimport regenDb from './models/RegenDb';\n\nexport default class Api {\n    // annotate with the express $Application type\n    express: $Application;\n\n    // create the express instance, attach app-level middleware, attach routers\n    constructor() {\n        this.express = express();\n        this.middleware();\n        this.routes();\n        this.generateDb();\n    }\n\n    // register middlewares\n    middleware(): void {\n        const store = redisStore(session);\n        const redisStoreOptions = process.env.NODE_ENV === 'production' ?\n            new store({url: process.env.REDIS_URL})\n            : new store({\n                host: process.env.REDIS_HOST,\n                port: process.env.REDIS_PORT,\n            })\n        this.express.use(morgan('dev'));\n        this.express.use(session({\n            secret: 'abc',\n            resave: false,\n            store: redisStoreOptions,\n            saveUninitialized: false,\n            cookie: {\n                maxAge: 7 * 24 * 60 * 60 * 1000, // 24h * 7 in milliseconds\n            },\n        }));\n        this.express.use(bodyParser.json());\n        this.express.use(bodyParser.urlencoded({extended: false}));\n        this.express.use(cors());\n    }\n\n    // connect resource routers\n    routes(): void {\n        const userRouter: UserRouter = new UserRouter();\n        const postRouter: PostRouter = new PostRouter();\n\n        // attach it to our express app\n        this.express.use(userRouter.path, checkRedisConnect, userRouter.router);\n        this.express.use(postRouter.path, checkRedisConnect, postRouter.router);\n\n        this.express.use(express.static(path.join(__dirname, 'static')));\n        this.express.get('/*', (req, res) => res.sendFile(path.resolve(__dirname, 'static', 'index.html')));\n    }\n\n    // generate databases\n    generateDb(): void {\n        if (REGEN_LOCAL_DB || process.env.NODE_ENV === 'staging') {\n            regenDb();\n        }\n    }\n}\n\nfunction checkRedisConnect(req: $Request, res: $Response, next: NextFunction) {\n    if (!req.session) {\n        return next(new Error('Redis not connected.'));\n    }\n    return next();\n}\n"]}