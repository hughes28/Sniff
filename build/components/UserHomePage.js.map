{"version":3,"sources":["components/UserHomePage.js"],"names":["UserHomePage","props","state","loading","axios","get","DOMAIN_URL","then","response","setState","status","authenticated","loggedInUsername","data","user_name","catch","error","console","log","history","match","params","username","React","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,Y;;;AACjB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,qBAAS;AADA,SAAb;AAFe;AAKlB;;;;4CAEmB;AAAA;;AAChBC,4BAAMC,GAAN,CAAaC,qBAAb,2BACCC,IADD,CACM,UAACC,QAAD,EAAc;AAChB,uBAAKC,QAAL,CAAc,EAACN,SAAS,KAAV,EAAd;AACA,oBAAIK,SAASE,MAAT,KAAoB,GAApB,IAA2BF,SAASE,MAAT,KAAoB,GAAnD,EAAwD;AACpD,2BAAKD,QAAL,CAAc,EAACE,eAAe,IAAhB,EAAsBC,kBAAkBJ,SAASK,IAAT,CAAcC,SAAtD,EAAd;AACH;AACJ,aAND,EAOCC,KAPD,CAOO,UAACC,KAAD,EAAW;AACdC,wBAAQC,GAAR,CAAYF,KAAZ;AACA,uBAAKP,QAAL,CAAc,EAACN,SAAS,KAAV,EAAd;AACH,aAVD;AAWH;;;iCAEQ;AACL,gBAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACrB,uBACI;AAAA;AAAA;AACI,kDAAC,gBAAD,IAAQ,SAAS,KAAKF,KAAL,CAAWkB,OAA5B,EAAqC,eAAe,KAAKjB,KAAL,CAAWS,aAA/D,GADJ;AAEI,kDAAC,mBAAD;AACI,kCAAU,KAAKV,KAAL,CAAWmB,KAAX,CAAiBC,MAAjB,CAAwBC,QADtC;AAEI,uCAAe,KAAKrB,KAAL,CAAWmB,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,KAAqC,KAAKpB,KAAL,CAAWU;AAFnE,sBAFJ;AAMI,kDAAC,uBAAD,IAAe,SAAS,KAAKX,KAAL,CAAWkB,OAAnC;AANJ,iBADJ;AAUH,aAXD,MAWO;AACH,uBACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA;AADJ,iBADJ;AAKH;AACJ;;;;EAzCqCI,gBAAMC,S;;AA6ChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;kBArDqBxB,Y","file":"UserHomePage.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport PostsList from './PostsList';\nimport NewPostButton from './NewPostButton';\nimport {DOMAIN_URL} from '../utils/Constants';\n\nexport default class UserHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        axios.get(`${DOMAIN_URL}/api/v1/user/session`)\n        .then((response) => {\n            this.setState({loading: false});\n            if (response.status === 200 || response.status === 304) {\n                this.setState({authenticated: true, loggedInUsername: response.data.user_name});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            this.setState({loading: false});\n        });\n    }\n\n    render() {\n        if (!this.state.loading) {\n            return (\n                <div>\n                    <Navbar history={this.props.history} authenticated={this.state.authenticated}/>\n                    <PostsList\n                        username={this.props.match.params.username}\n                        postsEditable={this.props.match.params.username === this.state.loggedInUsername}\n                    />\n                    <NewPostButton history={this.props.history}/>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <h1>Loading</h1>\n                </div>\n            );\n        }\n    }\n\n}\n\n// LESSONS LEARNED\n// 1. Fetch on mount\n// 2. Loading state while fetching\n// 3. Display with ul and use map to transform individual array element into UI elements\n// 4. Use browser console to help figure out what data to extract from response\n// 5. return different UI under different conditions\n// 6. Use this.props.history.push to navigate users to desired page\n// 7. If communicating with backend at all, use Axios\n// 8. Teach NewPostButton history so that the NewPostButton component knows what history comes from\n"]}