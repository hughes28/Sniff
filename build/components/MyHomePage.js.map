{"version":3,"sources":["components/MyHomePage.js"],"names":["MyHomePage","props","state","loading","errorMessage","axios","get","DOMAIN_URL","then","response","setState","status","authenticated","catch","error","console","log","history","push","length","location","message","React","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,U;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,qBAAS,IADA;AAETC,0BAAc;AAFL,SAAb;AAFe;AAMlB;;;;4CAEmB;AAAA;;AAChBC,4BAAMC,GAAN,CAAaC,qBAAb,2BACCC,IADD,CACM,UAACC,QAAD,EAAc;AACnB,uBAAKC,QAAL,CAAc,EAACP,SAAS,KAAV,EAAd;AACG,oBAAIM,SAASE,MAAT,KAAoB,GAApB,IAA2BF,SAASE,MAAT,KAAoB,GAAnD,EAAwD;AACpD,2BAAKD,QAAL,CAAc,EAACE,eAAe,IAAhB,EAAd;AACH;AACJ,aAND,EAOCC,KAPD,CAOO,UAACC,KAAD,EAAW;AACdC,wBAAQC,GAAR,CAAYF,KAAZ;AACA,uBAAKb,KAAL,CAAWgB,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,aAVD;AAWH;;;iCAEQ;AACT,gBAAId,eAAe,EAAnB;;AAEA,gBAAI,KAAKF,KAAL,CAAWE,YAAX,CAAwBe,MAAxB,GAAiC,CAArC,EAAwC;AACvCf,+BAAe;AAAA;AAAA;AAAI,yBAAKF,KAAL,CAAWE;AAAf,iBAAf;AACA,aAFD,MAEO,IAAI,CAAC,CAAC,KAAKH,KAAL,CAAWmB,QAAX,CAAoBlB,KAA1B,EAAiC;AACvCE,+BAAe;AAAA;AAAA;AAAI,yBAAKH,KAAL,CAAWmB,QAAX,CAAoBlB,KAApB,CAA0BmB;AAA9B,iBAAf;AACF;;AAEK,gBAAI,KAAKnB,KAAL,CAAWU,aAAX,IAA4B,CAAC,KAAKV,KAAL,CAAWC,OAA5C,EAAqD;AACjD,uBACI;AAAA;AAAA;AACKC,gCADL;AAEC,kDAAC,gBAAD,IAAQ,SAAS,KAAKH,KAAL,CAAWgB,OAA5B,EAAqC,eAAe,KAAKf,KAAL,CAAWU,aAA/D,GAFD;AAGI,kDAAC,mBAAD,IAAW,eAAe,IAA1B,GAHJ;AAII,kDAAC,uBAAD,IAAe,SAAS,KAAKX,KAAL,CAAWgB,OAAnC;AAJJ,iBADJ;AAQH,aATD,MASO,IAAI,CAAC,KAAKf,KAAL,CAAWU,aAAhB,EAA+B;AAClC,uBACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA;AADJ,iBADJ;AAKH,aANM,MAMA;AACH,uBACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA;AADJ,iBADJ;AAKH;AAEJ;;;;EAvDmCU,gBAAMC,S;;AA0D9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;kBAlEqBvB,U","file":"MyHomePage.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport PostsList from './PostsList';\nimport NewPostButton from './NewPostButton';\nimport {DOMAIN_URL} from '../utils/Constants';\n\nexport default class MyHomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            errorMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        axios.get(`${DOMAIN_URL}/api/v1/user/session`)\n        .then((response) => {\n        \tthis.setState({loading: false});\n            if (response.status === 200 || response.status === 304) {\n                this.setState({authenticated: true});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            this.props.history.push('/');\n        });\n    }\n\n    render() {\n  \t\tlet errorMessage = '';\n\n  \t\tif (this.state.errorMessage.length > 0) {\n  \t\t\terrorMessage = <p>{this.state.errorMessage}</p>;\n  \t\t} else if (!!this.props.location.state) {\n  \t\t\terrorMessage = <p>{this.props.location.state.message}</p>;\n\t\t}\n\n        if (this.state.authenticated && !this.state.loading) {\n            return (\n                <div>\n                    {errorMessage}\n                \t<Navbar history={this.props.history} authenticated={this.state.authenticated}/>\n                    <PostsList postsEditable={true}/>\n                    <NewPostButton history={this.props.history}/>\n                </div>\n            );\n        } else if (!this.state.authenticated) {\n            return (\n                <div>\n                    <h1>User not authenticated.</h1>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <h1>Loading</h1>\n                </div>\n            );\n        }\n\n    }\n}\n\n// LESSONS LEARNED\n// 1. Fetch on mount\n// 2. Loading state while fetching\n// 3. Display with ul and use map to transform individual array element into UI elements\n// 4. Use browser console to help figure out what data to extract from response\n// 5. return different UI under different conditions\n// 6. Use this.props.history.push to navigate users to desired page\n// 7. If communicating with backend at all, use Axios\n// 8. Teach NewPostButton history so that the NewPostButton component knows what history comes from\n"]}